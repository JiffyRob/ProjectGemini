from enum import Enum, IntFlag, StrEnum, IntEnum, auto
from typing import Callable, Any, override, Protocol
from pygame.typing import RectLike, Point
from pygame.math import Vector2
from deprecated import deprecated
from dataclasses import dataclass

import zengl
import pygame

type SnekAPI = dict[str, Callable[..., Any]]  # TODO: this could be more specific
type FileID = str  # TODO: could this be more specific?

class Axis(IntFlag):
    X = auto()
    Y = auto()
    Z = auto()


class MapType(StrEnum):
    TOPDOWN = "TopDown"
    PLATFORMER = "Platformer"
    HOUSE = "House"
    HOVERBOARD = "Hoverboard"


class Direction(StrEnum):
    UP = "up"
    DOWN = "down"
    LEFT = "left"
    RIGHT = "right"

    def as_vector(self) -> Vector2:
        return Vector2({
            self.UP: (0, -1),
            self.DOWN: (0, 1),
            self.LEFT: (-1, 0),
            self.RIGHT: (1, 0),
        }[self])

    def reverse(self) -> "Direction":
        cls = self.__class__
        return {
            self.UP: cls.DOWN,
            self.DOWN: cls.UP,
            self.LEFT: cls.RIGHT,
            self.RIGHT: cls.LEFT,
        }[self]


class MapEntranceType(Enum):
    NORMAL = auto()
    FALLING = auto()


class GraphicsSetting(StrEnum):
    LOWEST = "budget potato"
    LOW = "average potato"
    MEDIUM = "snazzy potato"
    HIGH = "expensive potato"
    ULTRA = "ludicrous potato"


class ScaleMode(StrEnum):
    INTEGER = "integer"
    STRETCH = "stretch"
    ASPECT = "aspect"


class FrameCap(IntEnum):
    LOW = 15
    MEDIUM = 30
    HIGH = 60
    # Physics can't handle this RN :(
    # NONE = 0


@dataclass
class GameSettings:
    vsync: bool = True
    fullscreen: bool = False
    scale: ScaleMode = ScaleMode.ASPECT
    framecap: FrameCap = FrameCap.HIGH
    graphics: GraphicsSetting = GraphicsSetting.MEDIUM


class Sprite(Protocol):
    ...

class GlobalEffect(Protocol):
    ...


class Animation(Protocol):
    def update(self, dt: float) -> None: ...

    def restart(self) -> None: ...

    def done(self) -> bool: ...

    @property
    def image(self) -> pygame.Surface: ...


class _Timer(Protocol):
    def time_left(self) -> float: ...

    def percent_complete(self) -> float: ...

    def done(self) -> bool: ...

    def reset(self) -> None: ...

    def finish(self) -> None: ...


class Timer(_Timer):
    def update(self) -> None: ...


class DTimer(_Timer):
    def update(self, dt: float) -> None: ...


class Loader(Protocol):
    def postwindow_init(self) -> None: ...

    def join(self, path: FileID, for_map: bool=False) -> str: ...

    def get_text(self, path: FileID, for_map: bool=False) -> str: ...

    def get_json(self, path: FileID, for_map: bool=False) -> dict[str, Any]: ...

    def save_json(self, path: FileID, data: dict[str, Any]) -> None: ...

    def get_settings(self) -> GameSettings: ...

    def save_settings(self) -> None: ...

    def get_csv(self, path: FileID, item_delimiter: str=",", line_delimiter: str="\n", for_map: bool=False) -> list[str]: ...

    @staticmethod
    def convert(surface: pygame.Surface) -> pygame.Surface: ...

    @classmethod
    def create_surface(cls, size: Point) -> pygame.Surface: ...

    def get_surface(self, path: FileID, rect: RectLike | None=None) -> pygame.Surface: ...

    @deprecated("Manually scale instead")
    def get_surface_scaled_by(self, path: FileID, factor: Point=(2, 2)) -> pygame.Surface: ...

    @deprecated("Manually scale instead")
    def get_surface_scaled_to(self, path: FileID, size: Point=(16, 16)) -> pygame.Surface: ...

    def get_spritesheet(self, path: FileID, size: Point=(16, 16)) -> list[pygame.Surface]: ...

    @deprecated("Old file format that we shouldn't use anymore")
    def get_image(self, path: FileID, area: str | RectLike | None=None) -> pygame.Surface: ...

    def get_sound(self, path: FileID) -> pygame.mixer.Sound: ...

    def get_script(self, path: FileID) -> str: ...

    def get_cutscene(self, path: FileID) -> str: ...

    def get_vertex_shader(self, path: FileID) -> str: ...

    def get_fragment_shader(self, path: FileID) -> str: ...

    def get_shader_library(self, path: FileID) -> str: ...

    def get_save(self, path: FileID) -> dict[str, Any]: ...

    def save_data(self, path: FileID, data: dict[str, Any]) -> None: ...

    def delete_save(self, path: FileID) -> None: ...

    def get_save_names(self, amount: int=5) -> list[FileID]: ...

    def flush(self) -> None: ...


class Game(Protocol):
    def pop_state(self) -> None: ...

    def get_level(self) -> "Level": ...

    def get_loader(self) -> "Loader": ...

    def run_cutscene(self, name: FileID, api: SnekAPI | None = None) -> None: ...

    async def run_sub_cutscene(self, name: FileID, api: SnekAPI) -> None: ...

    async def get_current_planet_name(self) -> str: ...

    @property
    def mouse_pos(self) -> Point: ...

    @property
    def window_surface(self) -> pygame.Surface: ...

    @property
    def gl_window_surface(self) -> zengl.Image: ...

    def set_graphics(self, value: GraphicsSetting) -> None: ...

    def switch_setting(self, name: str, value: Any) -> None: ...

    def load_map(self, map_name: FileID, direction: Direction, position: Point, entrance: MapEntranceType) -> None: ...

    def load_save(self, save_name: FileID) -> None: ...

    def delayed_callback(self, dt: float, callback: Callable[[], Any]) -> None: ...

    def load_input_binding(self, name: FileID) -> None: ...

    def add_input_binding(self, name: FileID) -> None: ...

    def time_phase(self, mult: float) -> None: ...

    def play_soundtrack(self, track_name: FileID) -> None: ...

    async def run(self) -> None: ...

    def save_to_disk(self) -> None: ...

    def quit(self) -> None: ...

    def exit(self) -> None: ...


class GameState(Protocol):
    def pop(self) -> None: ...

    def update(self, dt: float) -> bool: ...

    def draw(self) -> None: ...


class Level(GameState, Protocol):
    def shake(self, magnitude: float = 5.0, delta: float = 8, axis: Axis = Axis.X | Axis.Y) -> None: ...

    def run_cutscene(self, cutscene_id: str, api: SnekAPI | None = None) -> None: ...

    async def attempt_map_cutscene(self) -> None: ...

    def exit_level(self) -> None: ...

    def switch_level(self) -> None: ...

    def lock(self) -> None: ...

    def unlock(self) -> None: ...

    def message(self, group: str, message: str) -> None: ...

    def add_effect(self, effect: GlobalEffect) -> None: ...

    def clear_effects(self) -> None: ...

    def spawn(self, sprite_name: str, rect: RectLike, z: float | None = None, **custom_fields: Any) -> None: ...

    def add_sprite(self, sprite: Sprite) -> None: ...

    def finish_dialog(self, answer: str) -> None: ...

    async def run_dialog(self, *terms: str) -> str: ...

    async def fade(self, effect_type: str, *args: float) -> GlobalEffect:
        """"
        Args:
        "fadein_circle", x, y
        "fadeout_cirlce", x, y
        "fadeout_paint", r, g, b
        "fadein_paint", r, g, b
        "paint", r, g, b[, duration]
        """
        ...

    def get_x(self, group: str="player") -> float: ...

    def get_y(self, group: str="player") -> float: ...

    def get_z(self, group: str="player") -> float: ...

    def get_facing(self, group: str="player") -> float: ...

    def get_group(self, group_name: str) -> set[Sprite]: ...

    def get_rects(self, rect_name: str) -> list[RectLike]: ...

    def show(self, group: str="player") -> None: ...

    def hide(self, group: str="player") -> None: ...

    @classmethod
    def load(cls, game: Game, name: str, direction: Direction | None=None, position: Point | None = None, entrance: MapEntranceType = MapEntranceType.NORMAL) -> "Level": ...

    def world_to_screen(self, pos: Point) -> Vector2: ...

    def screen_to_world(self, pos: Point) -> Vector2: ...

    def get_game(self) -> Game: ...

    def get_loader(self) -> Loader: ...